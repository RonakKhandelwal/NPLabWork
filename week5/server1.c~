
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

struct Node{
    char name[100];
    char *msg;
    int fd;
    struct Node* next;

};

struct Node* add(struct Node* root,char name[],int fd){
    struct Node* temp=(struct Node*)malloc(sizeof(struct Node));
    strcpy(temp->name,name);
    temp->fd=fd;
    temp->next=NULL;
    //printf("Something\n");
    if(root == NULL){
        return temp;
    }
    
    else{
        struct Node* cur=root;
        
        while(cur->next != NULL){
            if(cur->fd == fd){
                return root;
            }
            cur=cur->next;
        }
        cur->next=temp;
        return root;
    
    }

}


struct Node* check(struct Node* root,char name[]){
    struct Node* cur=root;
    while(cur != NULL){
        if(strcmp(cur->name,name) == 0){
            return cur;
        }
        cur=cur->next;
    
    }
    return NULL;


}



struct Node* checkfd(struct Node* root,int fd){
    struct Node* cur=root;
    while(cur != NULL){
        if(cur->fd == fd){
            return cur;
        }
        cur=cur->next;
    
    }
    return NULL;


}





int main()
{


    struct Node* root=NULL;

    int server_sockfd, client_sockfd;
    int server_len, client_len;
    struct sockaddr_in server_address;
    struct sockaddr_in client_address;
    int result;
    fd_set readfds, testfds;
    
    server_sockfd = socket(AF_INET, SOCK_STREAM, 0);
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = htonl(INADDR_ANY);
    server_address.sin_port = htons(9734);
    server_len = sizeof(server_address);
    bind(server_sockfd, (struct sockaddr *)&server_address, server_len);
    listen(server_sockfd, 5);
    FD_ZERO(&readfds);
    FD_SET(server_sockfd, &readfds);
    
    
    while(1) {
        char ch[1000];
        int fd;
        int nread;
        testfds = readfds;
        printf("server waiting\n");
        result = select(FD_SETSIZE, &testfds, (fd_set *)0,
        (fd_set *)0, (struct timeval *) 0);
        if(result < 1) {
            perror("server5");
            exit(1);
        }
        int flag=0;
        struct Node* dest=NULL;
        for(fd = 0; fd < FD_SETSIZE; fd++) {
            if(FD_ISSET(fd,&testfds)) {
               if(fd == server_sockfd) {
                    client_len = sizeof(client_address);
                    client_sockfd = accept(server_sockfd,
                    (struct sockaddr *)&client_address, &client_len);
                    FD_SET(client_sockfd, &readfds);
                    printf("adding client on fd %d\n", client_sockfd);
                                     
                   
                    
                }
                
                else {
                    ioctl(fd, FIONREAD, &nread);
                    
                    
                    if(nread == 0) {
                        close(fd);
                        FD_CLR(fd, &readfds);
                        printf("removing client on fd %d\n", fd);
                    }
                    
                  else {
                  
                  
                  struct Node* temp2=checkfd(root,fd);
                  if(temp2 == NULL){
                   read(fd, ch, 1000);
                   root=add(root,ch,fd);
                   write(fd,"You were added\nWho do you want to chat to MF!!",100);
                   read(fd, ch, 1000);
                   dest=check(root,ch);
                   
                   if(dest == NULL){
                        flag=1;
                        write(fd,"He's NOT THERE",100);
                   }
                   else{
                    write(fd,"He's  THERE",100);
                   }
                   fprintf(stdout,"A new client was added %s\n",ch);
                   fflush(stdout);
                    
                   }
                   
                   read(fd, ch, 1000);                                           
                        if(flag == 0){
                            write(dest->fd,ch, 100);
                        }
                        else{
                        printf("%s\nEnter your message\n",ch);
                        gets(ch);
                        write(fd,ch, 100);
                       // printf("some stuff");
                        
                        }
                    }
                }
            }
        }   
    }
}
